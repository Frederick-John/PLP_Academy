# -*- coding: utf-8 -*-
"""Efficient List Manipulation in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDbWv1veUsyXL6TyKEW8r113hibQvBzN

# Efficient List Manipulation in Python: A Step-by-Step Approach

Author: Frederick Ohwoavworiete

Date: 15th August 2025

## Objective

This task demonstrates practical applications of Python’s list methods, including appending, inserting, extending, removing elements, sorting, and searching for an element’s index. These operations are essential in data manipulation and preprocessing.

## Step-by-Step Implementation
"""

# Step 1: Create an empty list
my_list = []
print("Step 1 - Empty List:", my_list)

# Step 2: Append elements 10, 20, 30, 40
my_list.append(10)
my_list.append(20)
my_list.append(30)
my_list.append(40)
print("Step 2 - After Appending:", my_list)

# Step 3: Insert value 15 at the second position (index 1)
my_list.insert(1, 15)
print("Step 3 - After Inserting 15:", my_list)

# Step 4: Extend my_list with another list [50, 60, 70]
my_list.extend([50, 60, 70])
print("Step 4 - After Extending:", my_list)

# Step 5: Remove the last element from the list
my_list.pop()
print("Step 5 - After Removing Last Element:", my_list)

# Step 6: Sort the list in ascending order
my_list.sort()
print("Step 6 - Sorted List:", my_list)

# Step 7: Find and print the index of the value 30
index_30 = my_list.index(30)
print("Step 7 - Index of 30:", index_30)

"""## Explanation of Key Methods Used

- append() – Adds a single element to the end of the list.

- insert(position, value) – Places a new element at a specific index.

- extend() – Merges another list’s elements into the current list.

- pop() – Removes an element at a given index (default is the last element).

- sort() – Orders the list in ascending order by default.

- index() – Returns the position of the first occurrence of a given value.

## Final Output

When executed, the above code produces:

Step 1 - Empty List: []

Step 2 - After Appending: [10, 20, 30, 40]

Step 3 - After Inserting 15: [10, 15, 20, 30, 40]

Step 4 - After Extending: [10, 15, 20, 30, 40, 50, 60, 70]

Step 5 - After Removing Last Element: [10, 15, 20, 30, 40, 50, 60]

Step 6 - Sorted List: [10, 15, 20, 30, 40, 50, 60]

Step 7 - Index of 30: 3
"""